<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/data/jpa
		http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task.xsd">

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->
	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the JPA EntityManager definition below) -->
	<!-- (and Mail server related settings -->
	<context:property-placeholder location="classpath:jdbc/jdbc.properties, classpath:mail.properties" />

	<!-- import the dataSource definition -->
	<import resource="../jdbc/datasource-config.xml" />

	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

	<!-- Activates various annotations to be detected in bean classes: Spring's 
		@Required and @Autowired, as well as JSR 250's @PostConstruct, @PreDestroy 
		and @Resource (if available) and JPA's @PersistenceContext and @PersistenceUnit 
		(if available). -->
	<context:annotation-config />

	<!-- Instruct Spring to perform declarative transaction management automatically 
		on annotated classes. for mode="aspectj"/ see SPR-6392 -->
	<tx:annotation-driven />

	<task:annotation-driven executor="taskExecutor" />
	<task:executor id="taskExecutor" pool-size="10" />

	<!-- Mail sender configuration -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${mail.host}" />
		<property name="port" value="${mail.port}" />
		<property name="username" value="${mail.username}" />
		<property name="password" value="${mail.password}" />
		<property name="javaMailProperties">
			<props>
				<!-- Use SMTP-AUTH to authenticate to SMTP server -->
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.debug">false</prop>
				<prop key="mail.smtps.auth">${mail.ssl}</prop>
				<prop key="mail.smtp.ssl.enable">${mail.ssl}</prop>
				<!-- Use SMTP transport protocol -->
				<prop key="mail.transport.protocol">${mail.protocol}</prop>
			</props>
		</property>
	</bean>

	<beans profile="jpa">
		<!-- JPA EntityManagerFactory -->
		<bean id="entityManagerFactory"
			class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
			p:dataSource-ref="dataSource">
			<property name="jpaVendorAdapter">
				<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
					p:database="${jpa.database}" p:showSql="${jpa.showSql}" />
			</property>
			<!-- BOTH Persistence Unit and Packages to Scan are NOT compatible, persistenceUnit will win -->
			<property name="persistenceUnitName" value="projecthandler" />
			<property name="packagesToScan" value="fr.projecthandler" />
			<property name="jpaProperties">
				<props>
					<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory</prop>
					<prop key="hibernate.cache.use_second_level_cache">true</prop>
					<prop key="hibernate.cache.use_query_cache">false</prop>
				</props>
			</property>
		</bean>

		<!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
		<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
			p:entityManagerFactory-ref="entityManagerFactory" />


		<!-- Post-processor to perform exception translation on @Repository classes 
			(from native exceptions such as JPA PersistenceExceptions to Spring's DataAccessException 
			hierarchy). -->
		<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

		<!-- Will automatically be transactional due to @Transactional. EntityManager 
			will be auto-injected due to @PersistenceContext. PersistenceExceptions will 
			be auto-translated due to @Repository. -->
		<context:component-scan base-package="fr.projecthandler.dao" />
		<context:component-scan base-package="fr.projecthandler.service" />

	</beans>

</beans>